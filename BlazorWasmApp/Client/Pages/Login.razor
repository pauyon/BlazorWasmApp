@page "/login"
@using BlazorWasmApp.Shared.Domain.Models
@using BlazorWasmApp.Client.Authentication
@using BlazorWasmApp.Shared
@using System.Net
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<h3>Login</h3>

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>Username</label>
            <input @bind="loginRequest.UserName" class="form-control" placeholder="Username">
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" @oninput="UpdatePassword" type="password" class="form-control" placeholder="Password">
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new();

    private void UpdatePassword(ChangeEventArgs e)
    {
        loginRequest.Password = e.Value.ToString();
    }

    private async Task Authenticate()
    {
        var loginResponse = await HttpClient.PostAsJsonAsync<LoginRequest>("/api/account/login", loginRequest);

        if (loginResponse.IsSuccessStatusCode)
        {
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthenticationStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            NavigationManager.NavigateTo("/", true);
        }
        else if (loginResponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await JSRuntime.InvokeVoidAsync("alert", "Invalid username or password");
            return;
        }
    }
}
