@typeparam TEntity where TEntity : IEntityBase
@inherits ComponentBase

<PageTitle>@PageDetails!.TabTitle</PageTitle>

@if (IsLoading)
{
    <Loading />
}
else
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge">
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudText Typo="Typo.h3">@PageDetails!.PageTitle</MudText>
            </MudItem>
            <MudItem xs="12" sm="12" md="12" lg="12">
                <MudButton @attributes="UIConstants.ButtonNew()" OnClick="AddEditRecord">Add @(typeof(TEntity).Name)</MudButton>
            </MudItem>
            <MudItem xs="12" sm="12" md="12" lg="12">
                @GridContent
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public PageDetails? PageDetails { get; set; }

    [Parameter]
    public RenderFragment? GridContent { get; set; }

    [Parameter]
    public EventCallback<TEntity> AddEditCallback { get; set; }

    protected async Task AddEditRecord()
    {
        await AddEditCallback.InvokeAsync();
    }
}
